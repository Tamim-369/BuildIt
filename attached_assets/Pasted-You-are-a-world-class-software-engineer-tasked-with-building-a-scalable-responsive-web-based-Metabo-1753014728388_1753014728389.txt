You are a world-class software engineer tasked with building a scalable, responsive web-based Metabolic Health Coach application on Replit to support obesity/GLP-1 treatment (e.g., Semaglutide) patients. The app uses **Next.js** (with App Router, hosted via Node.js on Replit), **Tailwind CSS** for styling, and **MongoDB** (via MongoDB Atlas) as the database, with Firebase used only for Cloud Messaging and Analytics. The app enhances patient adherence by addressing barriers like side effects (68% dropout rate), plateaus, and knowledge gaps through a personalized educational content library, side effect tracking, and dose management, while generating real-world data (RWD) for lifestyle/drug synergies. The MVP focuses on these core features, with offline access and a foundation for Phase 2 (wearable integration, AI adherence predictors) and Phase 3 (AR tutorials, community forums). Authentication will be custom-built (no third-party providers like Google/Apple), using JWT for session management. Follow these detailed, step-by-step instructions to create, test, and deploy the app on Replit, ensuring it’s production-ready.

### Step-by-Step Instructions

#### Step 1: Set Up Replit Project
1. **Create a New Repl**:
   - In Replit, start a new project using the "Node.js" template and name it `MetabolicHealthCoach`.
2. **Configure Package Dependencies**:
   - Create a `package.json` file in the root directory:
     - Set the project name to `metabolic-health-coach`, version `1.0.0`.
     - Include scripts: `"dev": "next dev"`, `"build": "next build"`, `"start": "next start"`.
     - List dependencies: `next` (version 14.2.15 or latest), `react` (18.3.1 or latest), `react-dom` (18.3.1 or latest), `mongodb` (6.9.0 or latest), `jsonwebtoken` (9.0.2 or latest), `bcryptjs` (2.4.3 or latest), `firebase` (10.14.1 or latest, for Cloud Messaging and Analytics), `tailwindcss` (3.4.13 or latest), `postcss` (8.4.47 or latest), `autoprefixer` (10.4.20 or latest).
     - List devDependencies: `@types/node`, `@types/react`, `@types/react-dom`.
   - Run `npm install` in the Replit shell to install packages.
3. **Set Up Next.js Project**:
   - Initialize Next.js by running `npx create-next-app@latest` in the Replit shell. Choose:
     - App Router: Yes.
     - TypeScript: No (use JavaScript for simplicity).
     - ESLint: Yes.
     - Tailwind CSS: Yes.
     - Src directory: Yes.
     - Import alias: Default.
   - This creates a Next.js project structure. Adjust as needed below.
4. **Set Up File Structure**:
   - Modify the default Next.js structure to:
     ```
     ├── app/
     │   ├── layout.jsx
     │   ├── page.jsx
     │   ├── api/
     │   │   ├── auth/
     │   │   │   ├── login/route.js
     │   │   │   ├── register/route.js
     │   │   ├── content/route.js
     │   │   ├── sideEffects/route.js
     │   │   ├── schedules/route.js
     │   ├── components/
     │   │   ├── Navbar.jsx
     │   │   ├── ContentCard.jsx
     │   │   ├── SideEffectTracker.jsx
     │   │   ├── DoseReminder.jsx
     ├── public/
     │   ├── favicon.ico
     │   ├── service-worker.js
     ├── src/
     │   ├── lib/
     │   │   ├── mongodb.js
     │   │   ├── firebase.js
     │   ├── styles/
     │   │   ├── globals.css
     ├── package.json
     ├── next.config.mjs
     ├── tailwind.config.js
     ├── postcss.config.js
     ```
   - The `app` folder contains Next.js pages and API routes. `public` holds static assets. `src/lib` contains database and Firebase configs. `src/styles` holds Tailwind CSS.

#### Step 2: Configure MongoDB and Firebase
1. **Set Up MongoDB Atlas**:
   - Go to [MongoDB Atlas](https://cloud.mongodb.com), create a new project named `MetabolicHealthCoach`, and set up a free cluster.
   - Create a database user and allow network access (use `0.0.0.0/0` for Replit).
   - Copy the MongoDB connection string (e.g., `mongodb+srv://<user>:<password>@cluster0.mongodb.net`).
   - Create a database named `metabolic_health` with collections:
     - `users`: `{ userId: string, email: string, password: string (hashed), condition: string (diabetes/obesity), preferences: object (food, energy levels), sideEffects: array }`.
     - `content`: `{ contentId: string, title: string, description: string, type: string (nutrition/exercise/behavioral), tags: array (e.g., ["nausea", "diabetes"]), url: string (YouTube link or text) }`.
     - `sideEffects`: `{ logId: string, userId: string, symptom: string (nausea/fatigue), severity: number, timestamp: date, notes: string }`.
     - `schedules`: `{ scheduleId: string, userId: string, medication: string, dose: string, time: date, frequency: string }`.
2. **Configure MongoDB Connection**:
   - Create `src/lib/mongodb.js`:
     - Use the `mongodb` package to connect to MongoDB Atlas.
     - Export a function to initialize the client and return the `metabolic_health` database.
     - Cache the connection for reuse in API routes.
   - Store the connection string in a `.env` file (e.g., `MONGODB_URI=mongodb+srv://...`).
3. **Set Up Firebase (Cloud Messaging and Analytics Only)**:
   - In the Firebase Console (console.firebase.google.com), create a project named `MetabolicHealthCoach`.
   - Enable Cloud Messaging and Analytics.
   - Copy the Firebase configuration object (`apiKey`, `authDomain`, `projectId`, `storageBucket`, `messagingSenderId`, `appId`, `measurementId`).
   - Generate a VAPID key for Cloud Messaging.
   - Create `src/lib/firebase.js`:
     - Initialize Firebase app, Analytics, and Cloud Messaging.
     - Export `analytics` and `messaging` instances.
     - Add a function to request notification permissions using `getToken` with the VAPID key.
   - Store Firebase config in `.env` (e.g., `FIREBASE_API_KEY=...`).
4. **Set Up Environment Variables**:
   - Create `.env` in the root directory:
     - Add `MONGODB_URI`, `JWT_SECRET` (random string for JWT), and Firebase config variables (`FIREBASE_API_KEY`, etc.).
   - Ensure Replit loads `.env` (use Replit’s Secrets feature if needed).

#### Step 3: Build the Frontend
1. **Configure Next.js and Tailwind**:
   - Update `next.config.mjs` to enable basic Next.js settings (e.g., React strict mode).
   - Update `tailwind.config.js` to include `app/**/*.{js,jsx}` and `src/**/*.{js,jsx}` in the content array.
   - In `app/layout.jsx`, create a root layout:
     - Return an HTML structure with `<html lang="en">`, `<body>`, and `{children}`.
     - Include Tailwind CSS via `app/styles/globals.css`.
     - Add a `<script>` tag to register `service-worker.js` (for offline support).
   - In `app/styles/globals.css`, import Tailwind base, components, and utilities, and add minimal custom styles (e.g., `.container { max-width: 1200px; }`).
2. **Create the Main Page** (`app/page.jsx`):
   - Create a functional component that:
     - Uses `useState` for `user` (JWT payload), `content` (array of educational content), and `loading` (boolean).
     - Uses `useEffect` to check for a JWT token in cookies (use `js-cookie` or `document.cookie`) and fetch user data from `/api/auth/verify` (to be created).
     - Fetches content from `/api/content` with query params for tags (e.g., `nausea`, `diabetes`) based on user profile or side effects.
     - Renders a loading spinner (Tailwind: `text-center mt-10`) while fetching.
     - Conditionally renders:
       - If logged in: `<Navbar user={user} />`, a grid of `<ContentCard>` components, `<SideEffectTracker>`, and `<DoseReminder>`.
       - If not logged in: A login/register form (inputs for email/password, submit buttons; Tailwind: `bg-white p-6 rounded shadow`).
     - Uses Tailwind: `min-h-screen bg-gray-100`, `container mx-auto p-4`.
3. **Create the Navbar Component** (`app/components/Navbar.jsx`):
   - Create a functional component accepting a `user` prop.
   - Render a nav bar (Tailwind: `bg-blue-600 text-white p-4`) with:
     - App title (`Metabolic Health Coach`, `text-xl font-bold`).
     - If logged in, a “Log Out” button (Tailwind: `bg-red-500 px-4 py-2 rounded`) that clears the JWT cookie and redirects to `/`.
     - Flexbox layout (`flex justify-between items-center`).
4. **Create the ContentCard Component** (`app/components/ContentCard.jsx`):
   - Create a functional component accepting props (`contentId`, `title`, `description`, `type`, `tags`, `url`).
   - Render a card (Tailwind: `bg-white p-4 rounded shadow`) with:
     - Title (`text-xl font-semibold`).
     - Description (`text-gray-600`).
     - Type and tags (`text-sm text-gray-500`).
     - If `url` is a YouTube link, embed an `<iframe>` (Tailwind: `w-full h-64`).
   - Add `aria-label` for accessibility.
5. **Create the SideEffectTracker Component** (`app/components/SideEffectTracker.jsx`):
   - Create a functional component accepting a `userId` prop.
   - Render a form (Tailwind: `bg-white p-4 rounded shadow`) with:
     - Dropdown for symptoms (nausea, fatigue; `border p-2 rounded`).
     - Range slider for severity (1–10; `w-full`).
     - Textarea for notes (`border p-2 rounded w-full`).
     - Submit button (`bg-blue-500 text-white px-4 py-2 rounded`).
   - On submit, send a POST request to `/api/sideEffects` with `{ userId, symptom, severity, timestamp, notes }`.
   - Fetch recent logs (GET `/api/sideEffects?userId={userId}&limit=5`) and display in a list (Tailwind: `mt-4`).
   - Show tailored tips (e.g., “Try low-fat recipes” for nausea; hardcode for MVP or fetch from `/api/content`).
6. **Create the DoseReminder Component** (`app/components/DoseReminder.jsx`):
   - Create a functional component accepting a `userId` prop.
   - Render a form (Tailwind: `bg-white p-4 rounded shadow`) with inputs for medication, dose, time, frequency (`border p-2 rounded`).
   - On submit, send a POST request to `/api/schedules` with `{ userId, medication, dose, time, frequency }`.
   - Fetch upcoming schedules (GET `/api/schedules?userId={userId}`) and display in a list (Tailwind: `mt-4`).
   - Show alerts for reminders (Tailwind: `bg-yellow-100 p-2 rounded`; use Firebase Cloud Messaging in Phase 2).
7. **Add Offline Support**:
   - Create `public/service-worker.js` to cache static assets (`app/**/*`, `public/**/*`) and API responses (`/api/content`).
   - Register the service worker in `app/layout.jsx` using `navigator.serviceWorker.register('/service-worker.js')`.
   - Use the Cache API to store content for offline access (e.g., recipes, video embeds).

#### Step 4: Build API Routes
1. **Authentication Routes** (`app/api/auth/*`):
   - Create `app/api/auth/register/route.js`:
     - Handle POST requests with `{ email, password }`.
     - Hash the password using `bcryptjs`.
     - Save to MongoDB `users` collection (`userId: uuid`, `email`, `password`, `condition: null`, `preferences: {}`, `sideEffects: []`).
     - Return a JWT (signed with `JWT_SECRET`) in a cookie (`Set-Cookie`).
   - Create `app/api/auth/login/route.js`:
     - Handle POST requests with `{ email, password }`.
     - Verify the password against MongoDB `users` using `bcryptjs`.
     - Return a JWT cookie on success.
   - Create `app/api/auth/verify/route.js` (optional):
     - Handle GET requests with a JWT cookie.
     - Verify the JWT and return user data (`userId`, `email`, `condition`).
2. **Content Route** (`app/api/content/route.js`):
   - Handle GET requests with query params (e.g., `tags=nausea,diabetes`).
   - Query MongoDB `content` collection, filtering by tags (use `$in` operator).
   - Return an array of content objects.
3. **Side Effects Route** (`app/api/sideEffects/route.js`):
   - Handle POST requests to save logs (`{ userId, symptom, severity, timestamp, notes }`) to MongoDB `sideEffects`.
   - Handle GET requests with `userId` and `limit` params to fetch recent logs.
   - Verify JWT for both requests (extract `userId` from token).
4. **Schedules Route** (`app/api/schedules/route.js`):
   - Handle POST requests to save schedules (`{ userId, medication, dose, time, frequency }`) to MongoDB `schedules`.
   - Handle GET requests with `userId` to fetch schedules.
   - Verify JWT for both requests.

#### Step 5: Implement Core Features
1. **Educational Content Library**:
   - Populate MongoDB `content` collection with sample data:
     - Nutrition: `{ title: "Low-Fat Smoothie", description: "Blend spinach, banana...", type: "nutrition", tags: ["nausea", "high-fiber"], url: "https://youtube.com/..." }`.
     - Exercise: `{ title: "5-Min Walk", description: "Low-energy walk...", type: "exercise", tags: ["fatigue"], url: "https://youtube.com/..." }`.
     - Behavioral: `{ title: "Managing Plateaus", description: "Tips for progress...", type: "behavioral", tags: ["plateau"], url: "https://youtube.com/..." }`.
   - In `app/page.jsx`, fetch content from `/api/content` with dynamic tags based on user `sideEffects` or `condition`.
   - Embed YouTube videos in `ContentCard.jsx` using `<iframe>` (ensure `allowfullscreen`).
   - Use placeholder YouTube links for MVP, simulating Academy of Nutrition and Dietetics content.
2. **Side Effect Tracker**:
   - In `SideEffectTracker.jsx`, save logs to `/api/sideEffects` and fetch recent logs.
   - Display tips (e.g., “Try low-fat recipes” for nausea) by querying `/api/content` with matching tags.
   - Track log frequency in MongoDB for RWD (e.g., count nausea logs).
3. **Personalized Dose Management**:
   - In `DoseReminder.jsx`, save schedules to `/api/schedules` and fetch upcoming reminders.
   - Display alerts (MVP: on-screen; Phase 2: Firebase Cloud Messaging).

#### Step 6: Add Data-Driven Features
1. **RWE Generation**:
   - Use Firebase Analytics to log events (`log_side_effect`, `view_content`, `set_reminder`).
   - Store anonymized data in MongoDB `sideEffects` with a `consent` flag for adherence studies.
2. **Commercial Insight**:
   - Track frequent symptoms in MongoDB (e.g., count `muscle loss` queries) to inform content creation.
3. **Progress Linking**:
   - In `ContentCard.jsx`, show static motivational messages (e.g., “Users who followed this meal plan saw 23% less nausea”) for MVP.

#### Step 7: Ensure Accessibility and Performance
1. **Accessibility**:
   - Follow WCAG 2.1:
     - Add `aria-label` to buttons, cards, and forms.
     - Use high-contrast Tailwind classes (`text-gray-900` on `bg-white`).
     - Ensure keyboard navigation (`tabIndex` for interactive elements).
   - Test with a screen reader (e.g., NVDA in Chrome).
2. **Performance**:
   - Use `React.memo` for `ContentCard` to prevent re-renders.
   - Implement dynamic imports in Next.js for lazy-loading (`next/dynamic`).
   - Optimize MongoDB queries with indexes (e.g., on `userId`, `tags`).

#### Step 8: Test the App
1. **Unit Tests**:
   - Add `jest` and `@testing-library/react` to `package.json` (optional for MVP).
   - Test `ContentCard` rendering, `SideEffectTracker` form submission, and `DoseReminder` schedule saving.
2. **Integration Tests**:
   - Test MongoDB integration (e.g., save/fetch logs, schedules).
   - Test API routes (`/api/auth/*`, `/api/content`, etc.).
   - Simulate offline mode in Chrome DevTools to verify service worker caching.
3. **User Flow Testing**:
   - Test: Register, log in, log a side effect, set a reminder, view content.
   - Verify responsive design in Replit’s preview (mobile/desktop).

#### Step 9: Deploy the App
1. **Local Testing**:
   - Run `npm run dev` to start the Next.js server (port 3000).
   - Test in Replit’s preview window.
2. **Deploy to Vercel** (Recommended for Next.js):
   - Install the Vercel CLI: `npm install -g vercel`.
   - Run `vercel login` in the Replit shell.
   - Deploy: `vercel --prod`.
   - Configure environment variables (`MONGODB_URI`, `JWT_SECRET`, Firebase vars) in Vercel’s dashboard.
   - Verify at the Vercel URL (e.g., `https://metabolic-health-coach.vercel.app`).
3. **Alternative: Replit Deployment**:
   - Use Replit’s built-in deployment (Autoscale or Reserved VM).
   - Set `NEXT_PUBLIC_*` env vars in Replit Secrets.
   - Ensure MongoDB and Firebase connections work.

#### Step 10: Plan for Future Phases
1. **Phase 2**:
   - Integrate wearables (Apple Health, Fitbit, Dexcom) via APIs, storing data in MongoDB.
   - Add AI adherence alerts (use Firebase Cloud Functions to analyze missed logs).
2. **Phase 3**:
   - Implement WebXR for AR tutorials (use A-Frame).
   - Add forums using MongoDB for messages and Firebase Realtime Database for real-time chat.
   - Build a VR expectation manager (static visualizations for MVP).

#### Step 11: Documentation
1. **Create README.md**:
   - Describe the app’s purpose, MVP features, and setup (Next.js, MongoDB, Firebase).
   - List dependencies, env vars, and deployment steps (Vercel/Replit).
   - Explain how to add content to MongoDB `content` collection.
2. **User Guide**:
   - Detail user flows: Register, log in, log side effects, set reminders, view content.
   - Explain offline access and notification setup.

### Deliverables
- A production-ready Next.js app on Replit, deployed to Vercel/Replit, with:
  - Responsive Tailwind CSS UI (WCAG 2.1 compliant).
  - MongoDB integration for data storage.
  - Firebase Cloud Messaging and Analytics for notifications and RWD.
  - Custom JWT-based authentication.
  - MVP features: Educational content library, side effect tracker, dose management.
  - Offline access via service workers.
  - Foundation for Phase 2 (wearables, AI) and Phase 3 (AR, forums).
- Documentation (`README.md`) for setup, deployment, and maintenance.
- Analytics for RWD and commercial insights.

### Success Metrics
- Adherence: Target 2.1x higher 6-month adherence.
- Engagement: Aim for 72% content engagement (via Firebase Analytics).
- Retention: Achieve 34% higher retention with personalized content.
- RWD: Collect anonymized data for adherence studies.
- Competitive Edge: Outperform competitors with hyper-personalized content.

This prompt provides a comprehensive guide for Replit to build a production-ready Metabolic Health Coach app using Next.js, MongoDB, and Firebase, with custom authentication and a focus on scalability and accessibility.